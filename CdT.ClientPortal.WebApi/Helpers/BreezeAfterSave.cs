using Breeze.ContextProvider;
using System;
using System.Collections.Generic;
using System.Dynamic;

namespace ClientPortal.Helpers
{
    public static class Breeze
    {
        /// <summary>
        /// Add an entity to the SaveMap
        /// </summary>
        /// <param name="saveMap">The saveMap where to add the entity</param>
        /// <param name="entityToAdd">The entity to add to the SaveMap</param>
        /// <param name="context">The breeze context to use</param>
        public static void AddCustomEntity(this Dictionary<Type, List<EntityInfo>> saveMap, object entityToAdd, ContextProvider context, EntityState entityState = EntityState.Modified, bool forceUpdate = false)
        {
            var typeOfEntityToAdd = entityToAdd.GetType();
            var entityInfoList = new List<EntityInfo>();
            // check if the type exists in the savemap, if not create it
            if (!saveMap.ContainsKey(typeOfEntityToAdd))
            {
                saveMap.Add(typeOfEntityToAdd, entityInfoList);
            }
            else
            {
                saveMap.TryGetValue(typeOfEntityToAdd, out entityInfoList);
            }
            var entity = context.CreateEntityInfo(entityToAdd, entityState);
            entity.ForceUpdate = true;
            entity.OriginalValuesMap = new Dictionary<string, object>();
            entity.UnmappedValuesMap = new Dictionary<string, object>();

            if (entity.AutoGeneratedKey == null)
            {
                dynamic autoGeneratedKey = new ExpandoObject();
                autoGeneratedKey.propertyName = "Id";
                autoGeneratedKey.autoGeneratedKeyType = AutoGeneratedKeyType.KeyGenerator.ToString();
                entity.AutoGeneratedKey = new AutoGeneratedKey(entityToAdd, autoGeneratedKey);
            }

            entityInfoList.Add(entity);
        }

        public static void AddCustomEntity<T>(this Dictionary<Type, List<EntityInfo>> saveMap, object entityToAdd, ContextProvider context, EntityState entityState = EntityState.Modified, bool forceUpdate = false)
        {
            var typeOfEntityToAdd = typeof(T);
            var entityInfoList = new List<EntityInfo>();
            // check if the type exists in the savemap, if not create it
            if (!saveMap.ContainsKey(typeOfEntityToAdd))
            {
                saveMap.Add(typeOfEntityToAdd, entityInfoList);
            }
            else
            {
                saveMap.TryGetValue(typeOfEntityToAdd, out entityInfoList);
            }
            var entity = context.CreateEntityInfo(entityToAdd, entityState);
            entity.ForceUpdate = true;
            entity.OriginalValuesMap = new Dictionary<string, object>();
            entity.UnmappedValuesMap = new Dictionary<string, object>();

            if (entity.AutoGeneratedKey == null)
            {
                dynamic autoGeneratedKey = new ExpandoObject();
                autoGeneratedKey.propertyName = "Id";
                autoGeneratedKey.autoGeneratedKeyType = AutoGeneratedKeyType.KeyGenerator.ToString();
                entity.AutoGeneratedKey = new AutoGeneratedKey(entityToAdd, autoGeneratedKey);
            }

            entityInfoList.Add(entity);
        }
    }
}