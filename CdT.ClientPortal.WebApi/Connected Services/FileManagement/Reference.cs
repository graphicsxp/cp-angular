//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CdT.ClientPortal.WebApi.FileManagement {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CloneFileRequest", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
    [System.SerializableAttribute()]
    public partial class CloneFileRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ExternalStorageFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ExternalStorageFileId {
            get {
                return this.ExternalStorageFileIdField;
            }
            set {
                if ((this.ExternalStorageFileIdField.Equals(value) != true)) {
                    this.ExternalStorageFileIdField = value;
                    this.RaisePropertyChanged("ExternalStorageFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StoreFileResponse", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
    [System.SerializableAttribute()]
    public partial class StoreFileResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FileIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FileId {
            get {
                return this.FileIdField;
            }
            set {
                if ((this.FileIdField.Equals(value) != true)) {
                    this.FileIdField = value;
                    this.RaisePropertyChanged("FileId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileIOFault", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
    [System.SerializableAttribute()]
    public partial class FileIOFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CdT.ClientPortal.WebApi.FileManagement.FileIOFault.FaultTypes FaultTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalStackTraceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CdT.ClientPortal.WebApi.FileManagement.FileIOFault.FaultTypes FaultType {
            get {
                return this.FaultTypeField;
            }
            set {
                if ((this.FaultTypeField.Equals(value) != true)) {
                    this.FaultTypeField = value;
                    this.RaisePropertyChanged("FaultType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalException {
            get {
                return this.InternalExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalExceptionField, value) != true)) {
                    this.InternalExceptionField = value;
                    this.RaisePropertyChanged("InternalException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalStackTrace {
            get {
                return this.InternalStackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalStackTraceField, value) != true)) {
                    this.InternalStackTraceField = value;
                    this.RaisePropertyChanged("InternalStackTrace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="FileIOFault.FaultTypes", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
        public enum FaultTypes : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            FileNotFoundError = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            UnableToDeleteError = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            UnableToStoreError = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            OtherError = 3,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteFileRequest", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
    [System.SerializableAttribute()]
    public partial class DeleteFileRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FileIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FileId {
            get {
                return this.FileIdField;
            }
            set {
                if ((this.FileIdField.Equals(value) != true)) {
                    this.FileIdField = value;
                    this.RaisePropertyChanged("FileId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteFileResponse", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
    [System.SerializableAttribute()]
    public partial class DeleteFileResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StoreFileRequest", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
    [System.SerializableAttribute()]
    public partial class StoreFileRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AnonymizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ExternalStorageFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] FileDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Anonymize {
            get {
                return this.AnonymizeField;
            }
            set {
                if ((this.AnonymizeField.Equals(value) != true)) {
                    this.AnonymizeField = value;
                    this.RaisePropertyChanged("Anonymize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ExternalStorageFileId {
            get {
                return this.ExternalStorageFileIdField;
            }
            set {
                if ((this.ExternalStorageFileIdField.Equals(value) != true)) {
                    this.ExternalStorageFileIdField = value;
                    this.RaisePropertyChanged("ExternalStorageFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] FileData {
            get {
                return this.FileDataField;
            }
            set {
                if ((object.ReferenceEquals(this.FileDataField, value) != true)) {
                    this.FileDataField = value;
                    this.RaisePropertyChanged("FileData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileManagement.IFileManagement")]
    public interface IFileManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagement/CloneFile", ReplyAction="http://tempuri.org/IFileManagement/CloneFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CdT.ClientPortal.WebApi.FileManagement.FileIOFault), Action="http://tempuri.org/IFileManagement/CloneFileFileIOFaultFault", Name="FileIOFault", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
        CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse CloneFile(CdT.ClientPortal.WebApi.FileManagement.CloneFileRequest fileRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagement/CloneFile", ReplyAction="http://tempuri.org/IFileManagement/CloneFileResponse")]
        System.Threading.Tasks.Task<CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse> CloneFileAsync(CdT.ClientPortal.WebApi.FileManagement.CloneFileRequest fileRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagement/DeleteFile", ReplyAction="http://tempuri.org/IFileManagement/DeleteFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CdT.ClientPortal.WebApi.FileManagement.FileIOFault), Action="http://tempuri.org/IFileManagement/DeleteFileFileIOFaultFault", Name="FileIOFault", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
        CdT.ClientPortal.WebApi.FileManagement.DeleteFileResponse DeleteFile(CdT.ClientPortal.WebApi.FileManagement.DeleteFileRequest deletefileRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagement/DeleteFile", ReplyAction="http://tempuri.org/IFileManagement/DeleteFileResponse")]
        System.Threading.Tasks.Task<CdT.ClientPortal.WebApi.FileManagement.DeleteFileResponse> DeleteFileAsync(CdT.ClientPortal.WebApi.FileManagement.DeleteFileRequest deletefileRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagement/StoreFile", ReplyAction="http://tempuri.org/IFileManagement/StoreFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CdT.ClientPortal.WebApi.FileManagement.FileIOFault), Action="http://tempuri.org/IFileManagement/StoreFileFileIOFaultFault", Name="FileIOFault", Namespace="http://schemas.datacontract.org/2004/07/CdT.Storage.FileManagementService")]
        CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse StoreFile(CdT.ClientPortal.WebApi.FileManagement.StoreFileRequest storeFileRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagement/StoreFile", ReplyAction="http://tempuri.org/IFileManagement/StoreFileResponse")]
        System.Threading.Tasks.Task<CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse> StoreFileAsync(CdT.ClientPortal.WebApi.FileManagement.StoreFileRequest storeFileRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileManagementChannel : CdT.ClientPortal.WebApi.FileManagement.IFileManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileManagementClient : System.ServiceModel.ClientBase<CdT.ClientPortal.WebApi.FileManagement.IFileManagement>, CdT.ClientPortal.WebApi.FileManagement.IFileManagement {
        
        public FileManagementClient() {
        }
        
        public FileManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse CloneFile(CdT.ClientPortal.WebApi.FileManagement.CloneFileRequest fileRequest) {
            return base.Channel.CloneFile(fileRequest);
        }
        
        public System.Threading.Tasks.Task<CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse> CloneFileAsync(CdT.ClientPortal.WebApi.FileManagement.CloneFileRequest fileRequest) {
            return base.Channel.CloneFileAsync(fileRequest);
        }
        
        public CdT.ClientPortal.WebApi.FileManagement.DeleteFileResponse DeleteFile(CdT.ClientPortal.WebApi.FileManagement.DeleteFileRequest deletefileRequest) {
            return base.Channel.DeleteFile(deletefileRequest);
        }
        
        public System.Threading.Tasks.Task<CdT.ClientPortal.WebApi.FileManagement.DeleteFileResponse> DeleteFileAsync(CdT.ClientPortal.WebApi.FileManagement.DeleteFileRequest deletefileRequest) {
            return base.Channel.DeleteFileAsync(deletefileRequest);
        }
        
        public CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse StoreFile(CdT.ClientPortal.WebApi.FileManagement.StoreFileRequest storeFileRequest) {
            return base.Channel.StoreFile(storeFileRequest);
        }
        
        public System.Threading.Tasks.Task<CdT.ClientPortal.WebApi.FileManagement.StoreFileResponse> StoreFileAsync(CdT.ClientPortal.WebApi.FileManagement.StoreFileRequest storeFileRequest) {
            return base.Channel.StoreFileAsync(storeFileRequest);
        }
    }
}
